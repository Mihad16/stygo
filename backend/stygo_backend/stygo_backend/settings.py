"""
Django settings for stygo_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import cloudinary
import cloudinary.uploader
import cloudinary.api

from pathlib import Path
from datetime import timedelta
import os
import dj_database_url
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-#=s4ilj7n48u0r64rz9#d212c_br#zv(#gbmecg%6+mqj#5sj(')

# SECURITY WARNING: don't run with debug turned on in production!
# Default to True locally; set DEBUG=False via environment in Render.
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = [ 'stygo.vercel.app','stygo.onrender.com', 'api.stygo.in', '.stygo.in']
if DEBUG:
    ALLOWED_HOSTS += ['localhost', '127.0.0.1']
render_host = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if render_host:
    ALLOWED_HOSTS.append(render_host)


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'otp',
    'sellers',
    'products',
    'subscribers',
    'suggestions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'cloudinary_storage', 
    'cloudinary',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "django.middleware.common.CommonMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'stygo_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'stygo_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'postgres'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'mihadql9605'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5433'),
    }
}

# Prefer DATABASE_URL only in production to avoid mixing prod/dev DBs.
if not DEBUG:
    SSL_REQUIRE = True
    try:
        db_from_env = dj_database_url.config(
            conn_max_age=600,
            ssl_require=SSL_REQUIRE,
            default=None,
        )
    except dj_database_url.UnknownSchemeError:
        # Handle malformed DATABASE_URL like '://'
        db_from_env = None
    if db_from_env:
        DATABASES["default"] = db_from_env
    else:
        # In production, a managed Postgres URL must be set
        raise ImproperlyConfigured("DATABASE_URL is required in production")

# DB diagnostics
print(
    f">>> DB in use: ENGINE={DATABASES['default']['ENGINE']}, "
    f"NAME={DATABASES['default'].get('NAME')}, HOST={DATABASES['default'].get('HOST')}, PORT={DATABASES['default'].get('PORT')}"
)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/



STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'



STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CLOUDINARY_URL = os.environ.get("CLOUDINARY_URL")
USE_CLOUDINARY = bool(CLOUDINARY_URL)
if USE_CLOUDINARY:
    cloudinary.config(cloudinary_url=CLOUDINARY_URL)

# Django 5: configure storages via STORAGES setting
STORAGES = {
    "default": {
        "BACKEND": (
            "cloudinary_storage.storage.MediaCloudinaryStorage"
            if USE_CLOUDINARY
            else "django.core.files.storage.FileSystemStorage"
        ),
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Optional: serve legacy local media in DEBUG (not used by Cloudinary)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Diagnostics
try:
    from django.core.files.storage import default_storage
    print(">>> USING STORAGE (resolved):", type(default_storage).__name__)
    if USE_CLOUDINARY:
        print("Cloudinary cloud:", cloudinary.config().cloud_name)
    else:
        print(">>> Using local MEDIA_ROOT:", MEDIA_ROOT)
except Exception:
    pass
CORS_ALLOWED_ORIGINS = [
    "https://stygo.in",
    "https://www.stygo.in",
    "https://api.stygo.in",
    "https://stygo.vercel.app",
]
frontend_origin = os.environ.get("FRONTEND_URL")
if frontend_origin:
    CORS_ALLOWED_ORIGINS.append(frontend_origin)

if DEBUG:
    CORS_ALLOWED_ORIGINS += [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
    ]

CSRF_TRUSTED_ORIGINS = [
    "https://stygo.in",
    "https://www.stygo.in",
    "https://stygo.onrender.com",
    "https://api.stygo.in",
]

if DEBUG:
    CSRF_TRUSTED_ORIGINS += [
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
backend_origin = os.environ.get("BACKEND_URL")
if backend_origin:
    CSRF_TRUSTED_ORIGINS.append(backend_origin)

CORS_ALLOW_CREDENTIALS = True

# Honor X-Forwarded-Proto so Django knows original scheme behind proxies (e.g., Render)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'your-email@gmail.com')  # Your Gmail address
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'your-app-password')  # Your App Password
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@stygo.in')

# For development only - prints emails to console
if DEBUG and False:  # Set to False to send real emails even in development
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'